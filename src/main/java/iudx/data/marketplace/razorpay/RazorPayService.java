package iudx.data.marketplace.razorpay;

import io.vertx.codegen.annotations.GenIgnore;
import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;

@VertxGen
@ProxyGen
public interface RazorPayService {
  /**
   * The createProxy helps the code generation blocks to generate proxy code.
   *
   * @param vertx which is the vertx instance
   * @param address which is the proxy address
   * @return RazorPayServiceVertxEBProxy which is a service proxy
   */
  @GenIgnore
  static RazorPayService createProxy(Vertx vertx, String address) {
    return new RazorPayServiceVertxEBProxy(vertx, address);
  }

  /**
   * The create order method implements the creation of an order using the razorpayClient This
   * method also creates a transfer from the order to the respective merchant account
   *
   * @param request which is a JsonObject
   * @retun Future JsonObject which is a vertx Future
   */
  Future<JsonObject> createOrder(JsonObject request);

  /**
   * The verifyPayment method verifies the payment signature for every payment that is made using
   * RazorPay This method also creates a payment record in the marketplace database
   *
   * @param request which is a JsonObject
   * @retun Future JsonObject which is a vertx Future
   */
  Future<JsonObject> verifyPayment(JsonObject request);

  /**
   * Accepts the terms and conditions of behalf of the merchant after a linked account is created
   * <br>
   * The terms and conditions are accepted for <b>route</b> as a Razorpay product
   *
   * @param info contains accountId generated by Razorpay
   * @return productId as success response in Future JsonObject, failure of type Future if any
   * @see <a
   *     href="https://razorpay.com/docs/api/payments/route/linked-account-onboarding/request-product-config">Request
   *     product configuration</a>
   */
  Future<JsonObject> requestProductConfiguration(JsonObject info);

  /**
   * Checks if the account is activated by the Merchant by completing the required KYC or adding
   * their bank account details
   *
   * @param request - contains productId and accountId generated by Razorpay
   * @return status as <i>active</i> as success response in Future JsonObject, failure if the <br>
   *     status is any of ( <br>
   *     <i>requested</i> <br>
   *     <i>needs_clarification</i> <br>
   *     <i>under_review</i> <br>
   *     <i>suspended</i> <br>
   *     )
   * @see <a
   *     href="https://razorpay.com/docs/api/payments/route/linked-account-onboarding/fetch-product-config">Fetch
   *     a product configuration</a>
   */
  Future<Boolean> fetchProductConfiguration(JsonObject request);

  /**
   * Creates Linked account for the merchant through DMP in Payment Gateway
   *
   * @param request Required details to create linked account
   * @return Future of type JsonObject as success response, failure if any
   */
  Future<JsonObject> createLinkedAccount(String request);

  /**
   * Fetches a linked account from Razorpay
   *
   * @param accountId Razorpay ID generated after creating a linked account
   * @return Linked account information as Future of type JsonObject when as success response.
   *     Failure if any
   */
  Future<JsonObject> fetchLinkedAccount(String accountId);

  /**
   * Updates the account information after creating a linked account <br>
   * All the information except <i>businessType</i>, <i>email</i> could be updated
   *
   * @param request Fields to be updated as JSON string
   * @param accountId Razorpay generated ID after creating a linked account
   * @return Future of type boolean after updating successfully or failure if any
   */
  Future<Boolean> updateLinkedAccount(String request, String accountId);

  /**
   * Captures webhook event from RazorPay related to payment and order, it also triggers the flow of
   * policy creation
   *
   * @return Future of type JsonObject as success response, failure if any
   */
  Future<JsonObject> webhookSignatureValidator(JsonObject request, String signatureHeader);
}
