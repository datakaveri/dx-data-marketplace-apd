{
	"info": {
		"_postman_id": "d24b8344-f53b-4478-aea9-de94c4931c8f",
		"name": "IUDX-DMP-APD-V5.5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17194681"
	},
	"item": [
		{
			"name": "Provider APIs",
			"item": [
				{
					"name": "Product",
					"item": [
						{
							"name": "Create Product",
							"item": [
								{
									"name": "200 - Create Product",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"abcedede\",\n    \"resources\": [\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"abcedede\",\n    \"resources\": [\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io////agra-swachhata-app\",\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"abcedede\",\n    \"resources\": [\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 - Product Already Exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"abcedede\",\n    \"resources\": [\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Delete Product",
							"item": [
								{
									"name": "200 - Delete Product",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid ID",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123***",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123***"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Not Found",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Product Variant (P.V.)",
					"item": [
						{
							"name": "Create P.V.",
							"item": [
								{
									"name": "201 - Create P.V.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede\",\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede\",\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 - P.V. Alreaady Exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede\",\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update P.V.",
							"item": [
								{
									"name": "200 - Update P.V.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede\",\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede\",\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete P.V.",
							"item": [
								{
									"name": "200 - Delete P.V.",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede&variant=variant1",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abcedede"
												},
												{
													"key": "variant",
													"value": "variant1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Name",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abced&variant=variant1!!",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abced"
												},
												{
													"key": "variant",
													"value": "variant1!!"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Name Copy",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/product-variant?id=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abced&variant=variant1",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"product-variant"
											],
											"query": [
												{
													"key": "id",
													"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:abced"
												},
												{
													"key": "variant",
													"value": "variant1"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "List APIs",
					"item": [
						{
							"name": "List Products",
							"item": [
								{
									"name": "200 - List Products",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/list/products",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"list",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - List Products for Resource",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/list/products?resourceID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"list",
												"products"
											],
											"query": [
												{
													"key": "resourceID",
													"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "204 - No Content",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/list/products?resourceID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"list",
												"products"
											],
											"query": [
												{
													"key": "resourceID",
													"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/list/products",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"list",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid resource ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/provider/list/products?datasetID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests***",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "8445",
											"path": [
												"provider",
												"list",
												"products"
											],
											"query": [
												{
													"key": "datasetID",
													"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests***"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "List Purchases",
							"item": [
								{
									"name": "List Purchases",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const clientId = pm.environment.get(\"providerClientID\");",
							"const clientSecret = pm.environment.get(\"providerClientSecret\");",
							"",
							"const authReq = {",
							"    url : 'https://authvertx.iudx.io/auth/v1/token',",
							"    method: 'POST',",
							"    header : {",
							"        'Content-Type': 'application/json',",
							"        'clientId': clientId,",
							"        'clientSecret': clientSecret",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"  itemId: 'rs.iudx.io', ",
							"  itemType: 'resource_server',",
							"  role: 'provider'",
							"})",
							"    }",
							"};",
							"",
							"pm.sendRequest(authReq, function (err, response) {",
							"    console.log(response.json());",
							"    var jsonData = response.json();",
							"    pm.environment.set(\"token\", jsonData.results.accessToken);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Consumer APIs",
			"item": [
				{
					"name": "List Resources",
					"item": [
						{
							"name": "200 - Get Resources",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Resources for Provider",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Resource by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets?datasetID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									],
									"query": [
										{
											"key": "datasetID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - No Content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid ResourceID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets?datasetID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									],
									"query": [
										{
											"key": "datasetID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/datasets?datasetID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"datasets"
									],
									"query": [
										{
											"key": "datasetID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Providers",
					"item": [
						{
							"name": "200 - Get Providers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Provider by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - No Content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid ProviderID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/invalid",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unathorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Products",
					"item": [
						{
							"name": "200 - List Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List Products having given dataset",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?datasetId=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "datasetId",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List Products of a Provider",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - No content",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?providerID=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "providerID",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Purchases",
					"item": [
						{
							"name": "List Purchases",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8445",
									"path": [
										"consumer",
										"list",
										"purchases"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const clientId = pm.environment.get(\"clientID\");",
							"const clientSecret = pm.environment.get(\"clientSecret\");",
							"",
							"const authReq = {",
							"    url : 'https://authvertx.iudx.io/auth/v1/token',",
							"    method: 'POST',",
							"    header : {",
							"        'Content-Type': 'application/json',",
							"        'clientId': clientId,",
							"        'clientSecret': clientSecret",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"  itemId: 'rs.iudx.io', ",
							"  itemType: 'resource_server',",
							"  role: 'consumer'",
							"})",
							"    }",
							"};",
							"",
							"pm.sendRequest(authReq, function (err, response) {",
							"    var jsonData = response.json();",
							"    pm.environment.set(\"token\", jsonData.results.accessToken);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "token",
			"item": [
				{
					"name": "Get Provider token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"\",\n    \"itemType\": \"\",\n    \"role\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the provider token."
					},
					"response": []
				},
				{
					"name": "Get Consumer token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"\",\n    \"itemType\": \"\",\n    \"role\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the consumer token."
					},
					"response": []
				},
				{
					"name": "Get Provider Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"\",\n    \"itemType\": \"\",\n    \"role\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the provider delegate token."
					},
					"response": []
				},
				{
					"name": "Get Consumer Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"\",\n    \"itemType\": \"\",\n    \"role\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the consumer delegate token."
					},
					"response": []
				}
			],
			"description": "The collection comprises APIs that provide the Identity Access Token, which is essential for executing Policy and Access Request APIs."
		},
		{
			"name": "policy",
			"item": [
				{
					"name": "200 Verify Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Allow\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\n    \"name\": {\n    \"firstName\":\"Vasanth\",\n    \"lastName\":\"Rajaraman\"\n    },\n    \"email\": \"vasanth.rajaraman@datakaveri.org\"\n  },\n  \"owner\": {\n    \"id\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\n    \"name\": {\n    \"firstName\":\"B\",\n    \"lastName\":\"Robert A B C D\"\n    },\n    \"email\": \"bryanrobert@iisc.ac.in\"\n  },\n   \"item\": {\n     \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n     \"itemType\": \"resource_group\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Verify Policy: No Policy Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Deny\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"No policy exist for given Resource Group\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource_group\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Verify Policy: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:backend\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Delete Policy: Bad Request [Policy not active, expired, or withdrawn]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy is not ACTIVE\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Delete Policy:  Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this policy.\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as it doesn't exist\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"394608f9-b370-4606-a947-1cf300dab04c\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "specific thing to be written here"
					},
					"response": []
				},
				{
					"name": "200 Get Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrls}}{{basePath}}/policies",
							"host": [
								"{{baseUrls}}{{basePath}}"
							],
							"path": [
								"policies"
							],
							"query": [
								{
									"key": "asdkfjsklfjdg",
									"value": "sfl;gjkksfjgksjfgksjfgksf",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get Policy: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "someToken",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerTokenForbidden}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Linked account",
			"item": [
				{
					"name": "200 Create Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"123dummyseller_123@gmail.com\",\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"clinic\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Create Account : Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"      pm.expect(body).to.have.property(\"detail\", \"User registration incomplete : subcategory or category is invalid\");",
									"    }",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"09efghseller1@gmail.com\",\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"Abcd\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"dummySeller@gmail.com\",\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"doctors\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Fetch Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.globals.get(\"variable_key\");",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Fetch Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Fetch Account : Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account cannot be fetched as, it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Update Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account updated successfully\");",
									"",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Update Account : Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account updation failed : subcategory or category is invalid\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"skdfgksfgjfk\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Update Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "skdfskfgjkfjdgkjdgh",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Update Account : Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account cannot be updated as, it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Create Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderId\": \"order_NS5unmgvVfBptz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrls}}/policy",
							"host": [
								"{{baseUrls}}"
							],
							"path": [
								"policy"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Create Product Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"newProductAbcd\",\n    \"resourceIds\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n        \"695e222b-3fae-4325-8db0-3e29d01c4fc0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/provider/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}