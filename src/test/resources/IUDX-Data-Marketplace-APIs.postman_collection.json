{
	"info": {
		"_postman_id": "d24b8344-f53b-4478-aea9-de94c4931c8f",
		"name": "IUDX-DMP-APD-V5.5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17194681"
	},
	"item": [
		{
			"name": "token",
			"item": [
				{
					"name": "Get Provider token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerClientID}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"provider\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}{{dxAuthBasePath}}/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						},
						"description": "This API supplies the provider token."
					},
					"response": []
				},
				{
					"name": "Get Consumer token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{dxAuthBasePath}}/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						},
						"description": "This API supplies the consumer token."
					},
					"response": []
				},
				{
					"name": "Get Provider Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{providerDelegateId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{dxAuthBasePath}}/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						},
						"description": "This API supplies the provider delegate token."
					},
					"response": []
				},
				{
					"name": "Get Consumer Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{consumerDelegateId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{dxAuthBasePath}}/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						},
						"description": "This API supplies the consumer delegate token."
					},
					"response": []
				}
			],
			"description": "The collection comprises APIs that provide the Identity Access Token, which is essential for executing Policy and Access Request APIs."
		},
		{
			"name": "Linked account",
			"item": [
				{
					"name": "200 Create Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// checks if the linked account creation request is being run in local or in pipeline",
									"// if it is being run in pipeline, all the tests are disabled",
									"// as once the merchant is has created a linked account, it responds with ",
									"// merchant email already exists for account",
									"const isPipeline = pm.environment.get('isIntegrationTestsBeingRunInPipeline') == 'true';",
									"",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"clinic\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Create Account : Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"      pm.expect(body).to.have.property(\"detail\", \"User registration incomplete : subcategory or category is invalid\");",
									"    }",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"Abcd\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"9444477733\",\n    \"legalBusinessName\": \"Test corp 1\",\n    \"customerFacingBusinessName\": \"Test corp 2\",\n    \"businessType\": \"partnership\",\n    \"contactName\": \"Some name\",\n    \"profile\": {\n        \"category\": \"healthcare\",\n        \"subcategory\": \"doctors\",\n        \"addresses\": {\n            \"registered\": {\n                \"street1\": \"507, Koramangala 1st block\",\n                \"street2\": \"MG Road\",\n                \"city\": \"Bengaluru\",\n                \"state\": \"KARNATAKA\",\n                \"postalCode\": \"560038\",\n                \"country\": \"IN\"\n            }\n        }\n    },\n    \"legalInfo\": {\n        \"pan\": \"AAACL1234C\",\n        \"gst\": \"18AABCU9603R1ZM\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Fetch Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.globals.get(\"variable_key\");",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Fetch Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Fetch Account : Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account cannot be fetched as, it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Update Account : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account updated successfully\");",
									"",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Update Account : Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account updation failed : subcategory or category is invalid\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"skdfgksfgjfk\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Update Account : Unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "skdfskfgjkfjdgkjdgh",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Update Account : Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Linked account cannot be updated as, it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"9100090000\",\n  \"legalBusinessName\": \"Dummy Corp V2\",\n  \"customerFacingBusinessName\": \"Some Other Corp\",\n  \"contactName\": \"Test Name\",\n  \"profile\": {\n    \"category\": \"healthcare\",\n    \"subcategory\": \"doctors\",\n    \"addresses\": {\n      \"registered\": {\n        \"street1\": \"Outer Ring road\",\n        \"street2\": \"MG Road\",\n        \"city\": \"Bengaluru\",\n        \"state\": \"KARNATAKA\",\n        \"postalCode\": \"560038\",\n        \"country\": \"india\"\n      }\n    }\n  },\n  \"legalInfo\": {\n    \"pan\": \"ABACL1234C\",\n    \"gst\": \"19AABCU9603R1ZM\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/account",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Product",
			"item": [
				{
					"name": "201 - Create Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// To create a random and unique productId ",
									"// as the productId once generated, cannot be used again ",
									"// even if it is deleted ",
									"",
									"var randomValue = \"testProduct\" + ",
									"pm.variables.replaceIn('{{$guid}}');",
									"randomValue = randomValue.replace(/-/g, '');",
									"console.log(\"randomValue : \" + randomValue); ",
									"pm.environment.set(\"idForCreatingProduct\", randomValue)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResult = pm.response.json();",
									"productId = jsonResult.results.productId;",
									"",
									"postman.setEnvironmentVariable(\"productId\", jsonResult.results.productId);",
									"",
									"// Test the response code",
									"pm.test(\"response is 201 (Created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{idForCreatingProduct}}\",\n    \"resourceIds\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n        \"695e222b-3fae-4325-8db0-3e29d01c4fc0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidPayloadFormat\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"object instance has properties which are not allowed by the schema: [\\\"id\\\",\\\"resources\\\"]\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"abcedede\",\n    \"resources\": [\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io////agra-swachhata-app\",\n        \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "skfjdfgjdfkgjdfkgj",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"testProduct\",\n    \"resourceIds\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n        \"695e222b-3fae-4325-8db0-3e29d01c4fc0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - Forbidden (Linked account not activated)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Product creation is forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Product creation is forbidden as, linked account is not created\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"testProduct\",\n    \"resourceIds\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n        \"695e222b-3fae-4325-8db0-3e29d01c4fc0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 - Product Already Exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceAlreadyExists\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Document of given id already exists\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"testProduct\",\n    \"resourceIds\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n        \"695e222b-3fae-4325-8db0-3e29d01c4fc0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create P.V.",
			"item": [
				{
					"name": "201 - Create P.V.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResult = pm.response.json();",
									"console.log(jsonResult)",
									"pvId = jsonResult.results[0].productVariantId;",
									"console.log(pvId);",
									"postman.setEnvironmentVariable(\"productVariantId\", pvId);",
									"",
									"",
									"// Test the response code",
									"pm.test(\"response is 201 (Created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{productId}}\",\n    \"productVariantName\": \"variant2\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 150,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidPayloadFormat\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"object has missing required properties ([\\\"productId\\\"])\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productVariantName\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "sdklfjsflgjsflgk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct111\",\n    \"productVariantName\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 150,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - Forbidden [Provider who did not create product]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Resource is forbidden to access\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Product variant cannot be created, as the provider does not own the product\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct\",\n    \"productVariantName\": \"variant345\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 150,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 - P.V. Already Exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceAlreadyExists\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Document of given id already exists\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{productId}}\",\n    \"productVariantName\": \"variant2\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 150,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update P.V.",
			"item": [
				{
					"name": "200 - Update P.V.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResult = pm.response.json();",
									"pvId = jsonResult.results[0].productVariantId;",
									"postman.setEnvironmentVariable(\"productVariantId\", pvId);",
									"",
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{productId}}\",\n    \"productVariantName\": \"variant2\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 200,\n      \"duration\": 24\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidPayloadFormat\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"object has missing required properties ([\\\"productId\\\",\\\"productVariantName\\\"])\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variant\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-point-of-interests\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 100.0,\n      \"duration\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "sdjsfgkjskfgjdkfgj",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct111\",\n    \"productVariantName\": \"variant1\",\n    \"resources\": [\n        {\n          \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n          \"capabilities\": [\n            \"api\", \"sub\"\n          ]\n        },\n        {\n          \"id\": \"695e222b-3fae-4325-8db0-3e29d01c4fc0\",\n          \"capabilities\": [\n            \"sub\", \"file\"\n          ]\n        }\n      ],\n      \"price\": 200,\n      \"duration\": 24\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Order",
			"item": [
				{
					"name": "201 - Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResult = pm.response.json();",
									"orderId = jsonResult.results[0].orderId;",
									"postman.setEnvironmentVariable(\"orderId\", orderId);",
									"",
									"",
									"// Test the response code",
									"pm.test(\"response is 201 (Created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/consumer/order/:productVariantId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"order",
								":productVariantId"
							],
							"variable": [
								{
									"key": "productVariantId",
									"value": "{{productVariantId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ abcd ] \");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/consumer/order/:variant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"order",
								":variant"
							],
							"variable": [
								{
									"key": "variant",
									"value": "abcd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Not Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/consumer/order/:productVariantId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"order",
								":productVariantId"
							],
							"variable": [
								{
									"key": "productVariantId",
									"value": "060cc0ed-14fb-4f07-be1d-f0b66585eab6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Provider List APIs",
			"item": [
				{
					"name": "List Products",
					"item": [
						{
							"name": "200 - List Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List products for resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/products?resourceId={{resourceId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"products"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "{{resourceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - No Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 204 (No Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{notRegisteredProviderToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid resource ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ abcd ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/products?resourceID=abcd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"products"
									],
									"query": [
										{
											"key": "resourceID",
											"value": "abcd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "sdkfjskfdjgskfgjsfjg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Product Variants",
					"item": [
						{
							"name": "200 - List product variants for a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/product-variant?productId={{productId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "{{productId}}",
											"description": "product ID for which variants need to be fetched"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List product variants for provider with variant name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct&productVariantName=variant213",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct",
											"description": "product ID for which variants need to be fetched"
										},
										{
											"key": "productVariantName",
											"value": "variant213"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid product ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidIdValue\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Invalid id [ adjhfasdfadf ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/product-variant?productId=adjhfasdfadf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "adjhfasdfadf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "sdkjfskldjf slkdfgjs",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Product variants not found\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1&variant=variant28465845",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1",
											"description": "product ID for which variants need to be fetched"
										},
										{
											"key": "variant",
											"value": "variant28465845"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Purchase",
					"item": [
						{
							"name": "200 - List all purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=succeeded",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "succeeded"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List all failed purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=failed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "failed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List all pending purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List purchases by resourceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=pending&resourceId=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										},
										{
											"key": "resourceId",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List purchases by productId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=pending&productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										},
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List purchases by orderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=pending&orderId=order_No4SmVypmMrw1M",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										},
										{
											"key": "orderId",
											"value": "order_No4SmVypmMrw1M"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 - No Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 204 (No Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{notRegisteredProviderToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=succeeded",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "succeeded"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request [Invalid ID]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ sdkjfsdfkgjsfg ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?resourceId=sdkjfsdfkgjsfg&paymentStatus=failed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "sdkjfsdfkgjsfg"
										},
										{
											"key": "paymentStatus",
											"value": "failed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Not Authorised",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "sadlhfjsdfsdf",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Purchase info not found\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/provider/list/purchases?paymentStatus=succeeded&resourceId=93c2e5c2-3574-4e11-9530-5b1fbdfce832",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"provider",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "succeeded"
										},
										{
											"key": "resourceId",
											"value": "93c2e5c2-3574-4e11-9530-5b1fbdfce832"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Verify Payment",
			"item": [
				{
					"name": "200 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razorpay_order_id\": \"order_NmTravDc9v3NhH\",\n    \"razorpay_payment_id\": \"pay_NmTsQw5sn1GRQD\",\n    \"razorpay_signature\": \"afecace3d9969229b4c76a08c3c38fa771b6ed5430e5eebd4d7cf794da62b9ea\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/verify-payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify-payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:RazorPay:InvalidPayment\");",
									"    pm.expect(body).to.have.property(\"title\", \"RazorPay Error\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Payment Signature verification failed\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razorpay_order_id\": \"order_NmTravDc9v3NhH\",\n    \"razorpay_payment_id\": \"pay_NmTsQw5sn1GRQD\",\n    \"razorpay_signature\": \"bfecace3d9969229b4c76a08c3c38fa771b6ed5430e5eebd4d7cf794da62b9ea\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/verify-payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify-payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Not Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "abcdshjrfjsgrfrf"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razorpay_order_id\": \"order_NmTravDc9v3NhH\",\n    \"razorpay_payment_id\": \"pay_NmTsQw5sn1GRQD\",\n    \"razorpay_signature\": \"bfecace3d9969229b4c76a08c3c38fa771b6ed5430e5eebd4d7cf794da62b9ea\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/verify-payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify-payment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "policy",
			"item": [
				{
					"name": "200 Verify Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Allow\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\n    \"name\": {\n    \"firstName\":\"Vasanth\",\n    \"lastName\":\"Rajaraman\"\n    },\n    \"email\": \"vasanth.rajaraman@datakaveri.org\"\n  },\n  \"owner\": {\n    \"id\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\n    \"name\": {\n    \"firstName\":\"B\",\n    \"lastName\":\"Robert A B C D\"\n    },\n    \"email\": \"bryanrobert@iisc.ac.in\"\n  },\n   \"item\": {\n     \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n     \"itemType\": \"RESOURCE\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Verify Policy: No Policy Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Deny\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"No policy exists for the given resource\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"RESOURCE\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Verify Policy: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidPayloadFormat\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check if the delete policy is being run in local or in pipeline",
									"// if it is being run in pipeline, all the tests are disabled",
									"// as the policy cannot be delete from the pipline",
									"const isPipeline = pm.environment.get('isIntegrationTestsBeingRunInPipeline') == 'true';",
									"",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"policyId\": \"55c4ec4f-29b4-4c9a-94ad-c9113140697b\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Delete Policy: Bad Request [Policy not active, expired, or withdrawn]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check if the delete policy is being run in local or in pipeline",
									"// if it is being run in pipeline, all the tests are disabled",
									"// as the policy cannot be delete from the pipline",
									"const isPipeline = pm.environment.get('isIntegrationTestsBeingRunInPipeline') == 'true';",
									"",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"policyId\": \"a08f9100-c1b7-4a33-aa5e-4cc92c87bbf7\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"policyId\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Delete Policy:  Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy doesn't belong to the user\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"policyId\": \"a08f9100-c1b7-4a33-aa5e-4cc92c87bbf7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as it doesn't exist\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"policyId\": \"394608f9-b370-4606-a947-1cf300dab04c\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "specific thing to be written here"
					},
					"response": []
				},
				{
					"name": "200 Get Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get Policy: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "someToken",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy Not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{notRegisteredProviderToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumer List APIs",
			"item": [
				{
					"name": "List Resources",
					"item": [
						{
							"name": "200 - Get all resources",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/resources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Resource by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/resources?resourceId=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"resources"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Resources for Provider",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/resources?providerId=b2c27f3f-2524-4a84-816e-91f9ab23f837",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"resources"
									],
									"query": [
										{
											"key": "providerId",
											"value": "b2c27f3f-2524-4a84-816e-91f9ab23f837"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request Invalid ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ sdcjsdfh294 ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/resources?resourceId=sdcjsdfh294",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"resources"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "sdcjsdfh294"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "s;dfjskdfjgsrfg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/resources?resourceId=b58da193-23d9-43eb-b98a-a103d4b6103c",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"resources"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Providers",
					"item": [
						{
							"name": "200 - Get Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Get Provider by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerId=b2c27f3f-2524-4a84-816e-91f9ab23f837",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerId",
											"value": "b2c27f3f-2524-4a84-816e-91f9ab23f837"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Invalid ProviderID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/invalid ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerId=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerId",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Unathorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/providers?providerId=b2c27f3f-2524-4a84-816e-91f9ab23f837",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"providers"
									],
									"query": [
										{
											"key": "providerId",
											"value": "b2c27f3f-2524-4a84-816e-91f9ab23f837"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Purchases",
					"item": [
						{
							"name": "200 - List all successful consumer purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?paymentStatus=succeeded",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "succeeded"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List all failed consumer purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?paymentStatus=failed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "failed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List all pending consumer purchases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List consumer purchases by resourceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?resourceId=695e222b-3fae-4325-8db0-3e29d01c4fc0&paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "695e222b-3fae-4325-8db0-3e29d01c4fc0"
										},
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List consumer purchases by productId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct6f870e3e521c4fd495248c09895ceeae&paymentStatus=succeeded",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct6f870e3e521c4fd495248c09895ceeae"
										},
										{
											"key": "paymentStatus",
											"value": "succeeded"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List consumer purchases by orderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?orderId=order_NmTravDc9v3NhH&paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "orderId",
											"value": "order_NmTravDc9v3NhH"
										},
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidIdValue\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Invalid id [ urn:abcd.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1 ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?productId=urn:abcd.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1&paymentStatus=succeeded",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:abcd.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1"
										},
										{
											"key": "paymentStatus",
											"value": "succeeded"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Not Authorised",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "someToken",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2&paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2"
										},
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Purchase info not found\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/purchases?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcdefg&paymentStatus=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"purchases"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcdefg"
										},
										{
											"key": "paymentStatus",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Products",
					"item": [
						{
							"name": "200 - List Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List Products by resourceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?resourceId=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "resourceId",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - List Products by providerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?providerId=b2c27f3f-2524-4a84-816e-91f9ab23f837",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "providerId",
											"value": "b2c27f3f-2524-4a84-816e-91f9ab23f837"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request Invalid provider ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products?providerId=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"products"
									],
									"query": [
										{
											"key": "providerId",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2nocontent"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "kjsfgkjdfgkjdfgk",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/list/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"list",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Product Variants",
					"item": [
						{
							"name": "200 - List product variants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct",
											"description": "product ID for which variants need to be fetched"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidIdValue\");",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Invalid id [ abcsdjhf ] \");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/product-variant?productId=abcsdjhf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "abcsdjhf",
											"description": "product ID for which variants need to be fetched"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
											"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{providerDelegateToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd2",
											"description": "product ID for which variants need to be fetched"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"    pm.expect(body).to.have.property(\"detail\", \"Product variants not found\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{consumerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/consumer/product-variant?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd3424545",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"consumer",
										"product-variant"
									],
									"query": [
										{
											"key": "productId",
											"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProductAbcd3424545",
											"description": "product ID for which variants need to be fetched"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete P.V.",
			"item": [
				{
					"name": "200 - Delete P.V.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant?productVariantId={{productVariantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							],
							"query": [
								{
									"key": "productVariantId",
									"value": "{{productVariantId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Bad Request [Invalid Product Variant ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ dummyProductVariantId ] \");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant?productVariantId=dummyProductVariantId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							],
							"query": [
								{
									"key": "productVariantId",
									"value": "dummyProductVariantId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Not Authorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "sdkjfskfgjskfgjsdfkglj",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant?productVariantId=20fed015-c552-4342-9184-9401c2012634",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							],
							"query": [
								{
									"key": "productVariantId",
									"value": "20fed015-c552-4342-9184-9401c2012634"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Product variant not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product-variant?productVariantId=23fed015-c552-4342-9184-9401c2012635",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product-variant"
							],
							"query": [
								{
									"key": "productVariantId",
									"value": "23fed015-c552-4342-9184-9401c2012635"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Product",
			"item": [
				{
					"name": "200 - Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product?productId={{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Product deleted previously [Product is in INACTIVE state]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"bad request parameter\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Product cannot be deleted, as it was deleted previously\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product?productId={{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidId\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Given ID is invalid [ datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f ] \");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerDelegateToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product?productId=urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123***",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "urn:datakaveri.org:datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f:xyz123***"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (invalidAuthorizationToken)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:invalidAuthorizationToken\");",
									"        pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct112",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct112"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:dmp:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Document of given id does not exist\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{providerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/provider/product?productId=urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1012245",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"provider",
								"product"
							],
							"query": [
								{
									"key": "productId",
									"value": "urn:datakaveri.org:b2c27f3f-2524-4a84-816e-91f9ab23f837:testProduct1012245"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}