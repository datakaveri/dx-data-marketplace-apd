openapi: 3.0.2
info:
  title: DX Data Marketplace APIs
  version: 4.5.0
  description: 'The data marketplace is Data Exchange (DX) platform that enables data Providers to host their datasets as a product. Likewise, data consumers can buy the products listed by various providers '
  contact:
    email: support@iudx.org.in
    name: For support contact IUDX team at
paths:
  /provider/product:
    summary: Manage marketplace products and perform Create/Update/Delete operations on them. These apis are intended to be used by DX data providers
    post:
      tags:
        - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleProductPostBody'
            examples:
              Create product body:
                value:
                  name: flood-sensors
                  resources:
                    - pune-env-flood
                    - stqc-flood-sensors
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
              examples:
                Create product success:
                  value:
                    type: 'urn:dx:dmp:Sucess'
                    title: Success
                    results:
                      - productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Already exists:
                  value:
                    type: 'urn:dx:dmp:AlreadyExists'
                    results:
                      - productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
                        method: insert
                        title: failed
                        detail: 'Fail: Doc exists'
                    title: Product already exists
                Invalid productID:
                  value:
                    type: 'urn:dx:dmp:InvalidProductIDValue'
                    title: Bad request
                    detail: 'Invalid ProductID [ abc&23? ]'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
      description: |-
        Create a product where the body contains the name and the array of resources that will be part of the product. 
        The name cannot be updated once the product is created as it is a unique identifier for a product of a provider. The name is stored as a URN(for eg: a product named flood-sensors hosted by the provider iisc.ac.in/123qwerty is represented as urn:datakaveri.org:iisc.ac.in/123qwerty:flood-sensors)
    delete:
      tags:
        - provider
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: productID
          description: urn name of the product
          schema:
            maxLength: 150
            minLength: 3
            pattern: '^[a-zA-Z0-9/.:-]{3,150}$'
          in: query
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeleteProduct'
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Doesn't Exist:
                  value:
                    type: 'urn:dx:dmp:DocDoesNotExist'
                    results:
                      productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
                      method: delete
                      title: failed
                      detail: 'Fail: Cannot delete, Doc does not exist'
                    title: Product does not exist
                Invalid productID:
                  value:
                    type: 'urn:dx:dmp:InvalidProductIDValue'
                    title: Bad request
                    detail: 'Invalid productID [ abc&23? ]'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /provider/list/products:
    summary: 'List API for provider to view all the products listed by them, or a subset of the products based on the resources they contain.'
    get:
      tags:
        - provider
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: resourceID
          description: 'If resourceID is provided for listing, then products are filtered to show products only for that resource'
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '204':
          description: no content
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Invalid ID:
                  value:
                    type: 'urn:dx:dmp:InvalidResourceIDValue'
                    title: Bad request
                    detail: Invalid resource ID
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /provider/list/purchases:
    summary: 'List API for the provider to view all the purchases made on the products listed by them, or a subset of the purchases based on the product name.'
    get:
      tags:
        - provider
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: productID
          description: urn name of the product
          schema:
            maxLength: 150
            minLength: 3
            pattern: '^[a-zA-Z0-9/.:-]{3,150}$'
          in: query
          required: false
        - name: resourceID
          description: 'If resourceID is provided for listing, then purchases are filtered to show purchases against that resource'
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exampleResponseListPurchases'
        '204':
          description: no content
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Doesn't Exist:
                  value:
                    type: 'urn:dx:dmp:DocDoesNotExist'
                    results:
                      - productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
                        method: list
                        title: failed
                        detail: 'Fail: Doc does not exist'
                    title: Product does not exist
                Invalid name:
                  value:
                    type: 'urn:dx:dmp:InvalidNameValue'
                    title: Bad request
                    detail: 'Invalid name [ abc&23? ]'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /provider/product-variant:
    post:
      summary: ''
      operationId: post-provider-product-variant
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
              examples:
                Example 1:
                  value:
                    type: 'urn:dx:dmp:Success'
                    title: Success
                    results: [ ]
      description: 'Create a product variant where the body contains details about the variant such as price, duration, resources and their capabilities. Along with the name of the variant and the product it belongs to.'
      parameters:
        - schema:
            type: string
          in: header
          name: token
          description: DX Auth token to process the request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                variant:
                  type: string
                resources:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      capabilities:
                        type: array
                        items:
                          type: string
                price:
                  type: integer
                validity:
                  type: integer
              x-examples:
                Example 1:
                  id: 'urn:datakaveri.org:iisc.ac.in/123qwerty:flood-sensors'
                  variant: sensors-1
                  resources:
                    - id: pune-flood
                      capabilities:
                        - api
                        - sub
                    - id: stqc-flood
                      capabilities:
                        - sub
                        - file
                  price: 100
                  validity: 12
            examples:
              Example 1:
                value:
                  id: 'urn:datakaveri.org:iisc.ac.in/123qwerty:flood-sensors'
                  variant: sensors-1
                  resources:
                    - id: pune-flood
                      capabilities:
                        - api
                        - sub
                    - id: stqc-flood
                      capabilities:
                        - sub
                        - file
                  price: 100
                  validity: 12
    get:
      summary: ''
      operationId: get-provider-product-variant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { }
      parameters:
        - schema:
            type: string
          in: header
          name: token
          description: DX Auth token to process the request
        - schema:
            type: string
          in: query
          name: id
        - schema:
            type: string
          in: query
          name: variant
    parameters: [ ]
    put:
      summary: ''
      operationId: put-provider-product-variant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
      parameters:
        - schema:
            type: string
          in: header
          name: token
          description: DX Auth token to process the request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                variant:
                  type: string
                resources:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      capabilities:
                        type: array
                        items:
                          type: string
                price:
                  type: integer
                validity:
                  type: integer
              x-examples:
                Example 1:
                  id: 'urn:datakaveri.org:iisc.ac.in/123qwerty:flood-sensors'
                  variant: sensors-1
                  resources:
                    - id: pune-flood
                      capabilities:
                        - api
                        - sub
                    - id: stqc-flood
                      capabilities:
                        - sub
                        - file
                  price: 100
                  validity: 12
    delete:
      summary: ''
      operationId: delete-provider-product-variant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeleteProduct'
      parameters:
        - schema:
            type: string
          in: query
          name: id
        - schema:
            type: string
          in: query
          name: variant
        - schema:
            type: string
          in: header
          name: token

          description: IUDX Auth token to process the request
  /consumer/list/resources:
    summary: List API for the consumer to view the resources available on the marketplace.

    get:
      tags:
        - consumer
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: providerID
          description: Id of the provider for listing their resources
          schema:
            type: string
          in: query
          required: false
        - name: resourceID
          description: Id of the resource for its details
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exampleListResourcesResponse'
        '204':
          description: no content
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Doesn't Exist:
                  value:
                    type: 'urn:dx:dmp:DocDoesNotExist'
                    detail: 'Fail: provider does not exist'
                    title: Provider does not exist
                Invalid name:
                  value:
                    type: 'urn:dx:dmp:InvalidNameValue'
                    title: Bad request
                    detail: 'Invalid provider id value [ abc&23? ]'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /consumer/list/providers:
    summary: List API for consumers to view the providers enlisted on the marketplace.
    get:
      tags:
        - consumer
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: providerID
          description: Id of the provider for its details
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exampleListProviderResponse'
        '204':
          description: no content
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /consumer/list/purchases:
    summary: 'List API for the consumer to view all the past purchases made by them. They can also see  the status of the payment on each '
    get:
      tags:
        - consumer
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exampleResponseListPurchases'
        '204':
          description: no content
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /consumer/list/products:
    summary: List API for the comsumer to view all the products available against a resource.
    get:
      tags:
        - consumer
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
        - name: resourceID
          description: ID of the resource for listing products that contain it.
          in: query
          schema:
            type: string
          required: false
        - name: providerID
          description: Id of the provider for listing their products
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '204':
          description: no content
        '400':
          description: invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Invalid ID:
                  value:
                    type: 'urn:dx:dmp:InvalidResourceIDValue'
                    title: Bad request
                    detail: Invalid resource ID
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /product/usermaps:
    summary: CRUD APIs to map a consumer to a product after purchase is successful.
    post:
      tags:
        - admin
      parameters:
        - name: token
          description: DX Auth token to process the request
          schema:
            maxLength: 512
            minLength: 0
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            type: string
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleUsermapsPostBody'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Doesn't Exist:
                  value:
                    type: 'urn:dx:dmp:DocDoesNotExist'
                    results:
                      productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
                      method: delete
                      title: failed
                      detail: 'Fail: Cannot delete, Doc does not exist'
                    title: Product does not exist
                Invalid productID:
                  value:
                    type: 'urn:dx:dmp:InvalidProductIDValue'
                    title: Bad request
                    detail: 'Invalid productID [ abc&23? ]'
                Invalid Syntax:
                  value:
                    type: 'urn:dx:dmp:InvalidSyntax'
                    title: Invalid syntax
                    detail: Invalid format for time
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: failed
  /verify:
    post:
      operationId: post-verify-policy
      summary: Verify Policy
      tags:
        - admin
      description: |
        Verify API endpoint is used by DX AAA Server to check if a policy is present for a given consumer for the given 
        resource with a specified provider of the resource. This check is done by DX AAA Server before issuing 
        a token. 
        
        DMP Data Marketplace APD Server creates policy for a given item with type `resource`
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 512
            example: Bearer <JWT>
            description: Keycloak issued token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleVerifyRequestBody'
            examples:
              Request body for verify policy:
                value:
                    user:
                      id: a109807f-6b06-4d8a-ab64-a3a19b04a3b4
                      name:
                        firstName: test
                        lastName: consumer
                      email: consumer@gmail.com
                    owner:
                      id: 114077a3-6411-4b6e-bc97-c7e81b87685d
                      name:
                        firstName: test
                        lastName: provider
                      email: test@provider.com
                    item:
                      itemId: 2a0be315-4165-4c5b-a74e-116cc89272cb
                      itemType: resource
      security:
        - authorization: [ ]
      responses:
        '200':
          description: |- 
            OK
            - An active policy is present for the consumer for given resource with given constraints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyPolicySuccessResponse'
        '400':
          description: |- 
            Bad request
            - Invalid request schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyPolicyBadRequestResponse'
        '403':
          description: |- 
            forbidden
            - Policy does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyPolicyForbiddenResponse'

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
  schemas:
    verifyPolicySuccessResponse:
      title: Verify policy success response
      type: object
      properties:
        type:
          type: string
          description: URN type of success response
        apdConstraints:
          type: object
          description: Constraints of the policy
      required:
        - type
        - apdConstraints
      example:
        type: urn:apd:allow
        apdConstraints:
          rule: read
          duration: 3600
    verifyPolicyBadRequestResponse:
      title: 400 Response for verify policy
      type: object
      properties:
        type:
          type: string
          description: URN type of error response
        title:
          type: string
          description: title of the error response
        detail:
          type: string
          description: Error message describing the issue
      required:
        - type
        - title
        - detail
      example:
        {
          "type": "urn:dx:dm:invalidPayloadFormat",
          "title": "Bad Request",
          "detail": "Invalid json format in post request [schema mismatch]"
        }
    verifyPolicyForbiddenResponse:
      title: 403 Response for verify policy
      type: object
      properties:
        type:
          type: string
          description: URN type of the error response
        title:
          type: string
          description: title of the error message
        detail:
          type: string
          description: Description of error message
      required:
        - type
        - title
        - detail
      example:
        {
          "type": "urn:apd:Deny",
          "title": "Forbidden",
          "detail": "No policy exists for the given resource"
        }
    successResponseForDeleteProduct:
      title: Root Tupe for standard DELETE response
      description: example response for delete product API
      required:
        - type
      type: object
      properties:
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
        results:
          description: Results which matched the query. This is an array of objects.
          type: array
          items:
            type: object
      example:
        type: 'urn:dx:dmp:Success'
        title: Success
        results:
          - productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
    successResponseWithObjects:
      title: Root Type for standardResponse
      description: example Response for get products request
      required:
        - type
      type: object
      properties:
        totalHits:
          format: int32
          description: Total number of documents which matched the query.
          type: integer
        results:
          description: Results which matched the query. This is an array of objects.
          type: array
          items:
            type: object
        detail:
          description: Detailed description of the type or response
          type: string
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
      example:
        type: 'urn:dx:dmp:Success'
        title: Success
        totalHits: 1
        results:
          - productID: 'the productID formatted as a URN - URN would be based on the APD URL (e.g. urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb)'
            description: some text description for the product (e.g. a student associated in DataKaveri)
            price: 100
            duration: 12
            resources:
              - pune-env-flood
              - stqc-flood-sensor
    exampleResponseListPurchases:
      title: Root type for purchases API response
      description: example response for list products
      type: object
      properties:
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
        totalHits:
          format: int32
          description: Total number of documents which matched the query.
          type: integer
        results:
          description: Results which matched the query. This is an array of objects.
          type: array
          items:
            type: object
      example:
        type: 'urn:dx:dmp:Success'
        title: Success
        totalHits: 1
        results:
          - productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
            consumerID: 89a36273d77dac4cf38114fca1bbe64392547f86
            paymentStatus: payment.succeeded
            paymentTime: '2022-11-23T09:00:00Z'
            expiry: '2023-11-22T09:00:00Z'
            status: active/expired
    exampleListResourcesResponse:
      title: Root type for list resources API response
      description: example response for list resources
      type: object
      properties:
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
        totalHits:
          format: int32
          description: Total number of documents which matched the query.
          type: integer
        results:
          description: Results which matched the query. This is an array of objects.
          type: array
          items:
            type: object
      example:
        type: 'urn:dx:rs:success'
        title: success
        results:
          - resourceID: abc1
            resourceName: abc–flood
            accessPolicy: secure
            providerID: iisc.ac.in/123qwerty
            totalResources: 12
        totalHits: 1
    exampleListProviderResponse:
      title: Root type for list resources API response
      description: example response for list resources
      type: object
      properties:
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
        totalHits:
          format: int32
          description: Total number of documents which matched the query.
          type: integer
        results:
          description: Results which matched the query. This is an array of objects.
          type: array
          items:
            type: object
      example:
        type: 'urn:dx:rs:success'
        title: success
        results:
          - providerID: abc1
            providerName: abc–flood
            totalResources: 5
        totalHits: 1
    exampleProductPostBody:
      title: Root type for product body
      description: example request for creating product
      type: object
      example:
        name: flood-sensors
        description: some description for flod-sensors
        price: 50
        duration: 12
        resources:
          - pune-env-flood
          - stqc-flood-sensors
      properties:
        name:
          type: string
        resources:
          type: array
          items:
            type: object
            properties:
              resourceID:
                type: string
    exampleUsermapsPostBody:
      title: Root type for usermaps body
      description: example request for creating user map to product
      type: object
      properties:
        productID:
          type: string
        consumerID:
          type: string
        paymentStatus:
          type: string
        paymentTime:
          type: object
      example:
        productID: 'urn:datakaveri.org:iisc.ac.in/123qwerty:zxcvb'
        consumerID: qwerty987
        paymentStatus: payment.succeeded
        paymentTime: '2022-11-23T16:28:00Z'


    name:
      title: schemaName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string


    user:
      title: schemaUser
      description: consumer information
      type: object
      properties:
        id:
          type: string
          format: uuid
          pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
          minLength: 36
          maxLength: 36
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
      required:
        - id
        - name
        - email

    owner:
      title: schemaOwner
      description: provider information
      type: object
      properties:
        id:
          format: uuid
          pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
          minLength: 36
          maxLength: 36
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
      required:
        - id
        - name
        - email

    item:
      type: object
      description: resource information
      properties:
        itemId:
          format: uuid
          pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
          minLength: 36
          maxLength: 36
        itemType:
          enum:
            - resource
          minLength: 1
      required:
        - itemId
        - itemType

    exampleVerifyRequestBody:
      title: Root type for verify API body
      description: 'example request for verifying if consumer has purchased product, and if the purchase is expired or not'
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        owner:
          $ref: '#/components/schemas/owner'
        item:
          $ref: '#/components/schemas/item'


    exampleVerifyFailResponse:
      title: Root type for verify fail response
      description: example response for failed verify request
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        details:
          type: string
      example:
        type: 'urn:dx:dmp:Deny'
        title: Access Denied
        detail: message to convey to user
    errorResponseWithObjects:
      title: Root Type for standardResponse
      description: example Response for get products request
      required:
        - type
      type: object
      properties:
        detail:
          description: Detailed description of the type or response
          type: string
        type:
          description: URN type of the response indicating if the query was successful or if any errors have been triggered.
          type: string
        title:
          description: A human readable title to the message response.
    exampleResponseForGetPV:
      title: exampleResponseForGetPV
      x-stoplight:
        id: a1k5kz93pqx26
      type: object
      properties:
        id:
          type: string
tags:
  - name: provider
    description: |
      Datamarketplace specific data provider APIs.
    x-displayName: Provider
  - name: consumer
    description: |
      Catalogue consumer specific apis.
    x-displayName: Consumer
